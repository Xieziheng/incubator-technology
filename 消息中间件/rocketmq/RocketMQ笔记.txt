阅读源代码前的准备

获取和调试RocketMQ的源代码
获取RocketMQ源码
GitHub链接：https://github.com/apache/rocketmq
RocketMQ源码：https://github.com/apache/rocketmq.git
调试RocketMQ源码（Eclipse/IntelliJ IDEA）
1、启动NameServer
2、启动Broker
3、使用RocketMQ提供的实例验证消息发送和消息消费
1、修改org.apache.rocketmq.example.quickstart.Producer示例程序，设置消息生产者NameSerer地址
2、运行该示例程序，查看运行结果：提示成功
3、修改org.apache.rocketmq.example.quickstart.Consumer示例程序，设置消息消费者NameSerer地址
4、运行该示例程序，查看运行结果：提示成功
RocketMQ源代码的目录结构
broker：broker模块（broker启动进程）
client：消息客户端，包含消息生产者、消息消费者相关类
common：公共包
dev：开发者信息（非源代码）
distribution：部署实例文件夹（非源代码）
example：RocketMQ示例代码
filter：消息过滤相关基础类
filtersrv：消息过滤服务器实现相关类（Filter启动进程）
logappender：日志实现相关类
namesrv：NameServer实现相关类（NameServer启动进程）
openmessaging：消息开放标准，正在制定中
remoting：远程通信模块，基于Netty
srvutil：服务器工具类
store：消息存储实现相关类
style：checkstyle相关实现
test：测试相关类
tools：工具类，监控命令相关实现类
RocketMQ的设计理念和目标
设计理念
模式：基于主题的发布和订阅模式
核心功能包括消息发送、消息存储（Broker）、消息消费
整体设计追求简单和性能单一
主要体现三方面
NameServer设计极其简单，摒弃了业界常常用的使用Zookeeper充当信息管理的“注册中心”，自研NameServer来实现元数据的管理（Topic路由信息等）
高效的IO存储机制（追求消息发送的高吞吐量，消息存储文件设计成文件组的概念）
容忍存在设计缺陷，适当将某些工作下放给RocketMQ使用者（只保证消息一定被消费，不保证消息只消费一次，允许重复消费）
设计目标
1、架构模式
发布订阅模式
参与组件
消息发送者
消息服务器（消息存储）
消息消费
路由发现
2、顺序消费
消息消费者按照消息到达消息存储服务器的顺序消费
3、消息过滤
过滤机制
消息在Boker端消费
消息在消息消费端过滤
4、消息存储
考量纬度
消息堆积能力
消息存储能力
追求消息存储高性能：引入内存映射机制，所有主题的消息顺序存储在同一个文件中
避免消息无限累积：引入了消息文件过期机制与文件存储空间报警机制
5、消息高可用性
影响消息可靠性情况
1、Broker正常关机
2、Broker异常Crash
3、OS Crash
4、机器断电，但是能立即恢复供电情况
5、机器无法开机（可能是CPU、主板、内存等关键设备损坏）
6、磁盘设备损坏
1~4：在同步刷盘机制下可以确保不丢失消息，在异步刷盘模式下会丢失少量消息
5~6：单点故障，一旦发生，该节点上的消息全部丢失，如果开启异步复制机制，能保证丢失少量消息，后续版本中会引入双写机制，以满足消息可靠性要求极高的场合
6、消息到达（消费）低延迟
在消息不发生堆积时，以长轮询模式实现准实时的消息推送模式
7、确保消息必须被消费一次
通过消息消费确认机制（ACK）来确保消息至少被消费一次，有丢失可能，无法保证只被消费一次，有重复消费可能
8、回溯消息
消费端已经消费成功的消息，由于业务要求需要重新消费消息，支持按时间回溯，精确到毫秒，可前后回溯。
9、消息堆积
消息存储使用磁盘文件（内存映射机制），并且物理布局上为多个大小相等的文件组成逻辑文件组，可无限循环使用。
非永久存储，提供过期机制，默认保留3天
10、定时消息
消息发送到Broker后，不能被消费端立即消费，要到特定的时间点或者等待特定的时间后才能被消费
为了降低损耗，不支持任意经度的定时消息消费，仅支持特定延迟级别
11、消息重试机制
消息消费时，如果发送异常，支持消息重新投递，具体规则见官网


RocketMQ路由中心NameServer
NameServer架构设计
为了避免消息服务器的单点故障导致的整体系统瘫痪，通常会部署多台消息服务器共同承担消息的存储。而NameServer就是为了解决消息生产者如何知道要发往哪台消息服务器；让生产者如何在不重启服务器的情况下感知到消息服务器宕机等集群情况下产生的问题

NameServer启动流程
首先来解析配置文件，需要填充NamesrvConfig、NettyServerConfig属性值。
NameServer动态路由发现和剔除机制
